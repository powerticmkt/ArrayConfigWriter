{
  "name": "Array Config Writer",
  "tagline": "Update php array element permanently in a php file. This library allows you update specific php array values by specifying the variable name of the array and the index to update. s",
  "body": "# Array Config Writer \r\n\r\nThis php library can be used to update array values in php a file.\r\nSome applications use php array to store configuration values and to update the values,\r\nusers will have to manually open the configuration file and update the value.\r\n\r\nThis library makes the task of updating the array easy. You programmatically update \r\nthe values of the array.\r\n\r\n## Installation \r\n\r\n* Download the library and extract it in a folder of your application. The folder choice depends on your application.\r\n\r\n\r\n## Usage\r\n* Include the class library to be available for usage `require_once 'class-array-config-writer.php';`\r\n* Create an instance of  `Array_Config_Writer` class for the file that holds the php array we want to update\r\n```php\r\n    $config_writer = new Array_Config_Writer($config_file, $variable_name , $auto_save );\r\n```\r\n\r\nWhere :\r\n\r\n* **$config_file** (string) : The absolute path to the file where the array is place \r\n* **$variable_name** (string) : The variable name of the array we want to update \r\n* **$auto_save** (boolean) : Whether to automatically save the changes after the operation\r\n\r\nSupported variable Styles:\r\n* `Single index $config[ 'key'] = 'value' ;`\r\n* `Multi dimensional $config['key1']['key2'] = 'value';`\r\n\r\nYou can not use the library to update something like `$config = array( 'key' => 'value' );`\r\n\r\n**Notes:** \r\n* The library expect the variable to be indexed \r\n* The file can have other variables aside our target variable\r\n\r\n\r\nNow you can start updating the index of the array like this \r\n\r\n```php\r\n    $config_writer->write('key' , value );\r\n```\r\n\r\n**Note:** \r\n* You can set value to any php variable type \r\n* The library treats numeric index as it is. Meaning '21' is different from 21\r\n\r\n## Examples\r\n\r\n**PHP File** config.php\r\n\r\n```php\r\n    /*\r\n    |--------------------------------------------------------------------------\r\n    | Site Name\r\n    |--------------------------------------------------------------------------\r\n    |\r\n    | \r\n    |\r\n    */\r\n    $config[ 'site_name'] = 'Example Site';\r\n\r\n\r\n    /*\r\n    |--------------------------------------------------------------------------\r\n    |  Enable caching\r\n    |-------------------==-------------------------------------------------------\r\n    |\r\n    |\r\n    */\r\n    $config[ 'enable_caching'] = true;\r\n\r\n    /*\r\n    |--------------------------------------------------------------------------\r\n    |  Custom Array\r\n    |-------------------==-------------------------------------------------------\r\n    |\r\n    |\r\n    */\r\n    $config[ 'message'] = array(\r\n                                'title' => 'Welcome' ,\r\n                                 'body' => 'Thanks for your interest in the library'\r\n                            );\r\n\r\n\r\n    /*\r\n    |--------------------------------------------------------------------------\r\n    |  Another Config Variable for the database \r\n    |-------------------==-------------------------------------------------------\r\n    |\r\n    |\r\n    */\r\n    $db[ 'database'] =  '';\r\n    $db[ 'username'] =  '';\r\n```\r\n\r\nCreate an instance of the library\r\n\r\n```php\r\n    $config_writer = new Array_Config_Writer( APP_PATH.'config/config.php', 'config' );\r\n     \r\n    // update the site name\r\n\r\n    $config_writer->write('site_name' , \"New Site Name' );\r\n```\r\n\r\n## Method Chaining \r\n\r\n```php\r\n    $config_writer->write('site_name' , \"New Site Name' )->write('enable_caching' , false );\r\n```\r\n\r\nTo update the `'message'` index which has array has value\r\n\r\n* First get the current value \r\n\r\n```php\r\n    $meesage = $config['message'];\r\n```\r\n\r\n* Then change its value(s) \r\n\r\n```php\r\n    $message['title'] = 'My New title' ;\r\n    $message['body'] = 'New message body' ;\r\n```\r\n\r\n* Or completely set new array for the message index\r\n\r\n```php\r\n    // assuming the admin sent a form, Just an example, you should validate user post! :d\r\n    $message = $_POST['message'];\r\n```\r\n\r\n* Save it with the library \r\n```php\r\n    $config_writer->write('message' , $message );\r\n```\r\n\r\n## Disable Auto Save Option\r\n\r\nYou can disable auto save option for some reason\r\n```php\r\n    // note the third argument\r\n    $config_writer = new Array_Config_Writer( APP_PATH.'config/config.php', 'config' , false );\r\n\r\n    $config_writer->write('site_name' , \"New Site Name' )->write('enable_caching' , false );\r\n```\r\n## Manually call the save method\r\n\r\nIf you disable the auto save functionality, you will have to manually call `save()` once you are done with `write()`\r\n\r\n```php   \r\n    $config_writer->save();\r\n```\r\n\r\n## Update Multiple Variable With Single Library Instance \r\n\r\nLets say the **config.php** file has another variable aside `$config` that needs to be updated\r\nIf you check the example **config.php** file there is another variable named `$bd` \r\nWe can update this variable also without creating new instance of the library to target `$db`\r\n\r\n**Switch target variable**\r\n\r\n```php\r\n     $config_writer->setVariableName('db');\r\n```\r\n\r\nNow the subsequent calls to `write()` method will replace index of `$db` variable keeping the previous changes to `config` variable intact\r\n  \r\n```php  \r\n    $config_writer->write('database' , 'my_database' );\r\n    $config_writer->write('user' , 'db_user' );\r\n```\r\n\r\n##Dealing WIth Index That Does Not Already Exist\r\nIt is possible that the index you passed to `write()` method does't exist yet, you can tell library \r\nto create new array index if the index does not already exist with the third argument of `write()` method\r\n\r\nCheck the signature of the write method \r\n```php\r\n    public function write( $index  = null, $replacement = null , $write_method = self::CREATE_OR_UPDATE , $comments = null )\r\n```\r\n\r\nWhere :\r\n\r\n* `$index` (mixed) : The index of of the array to update , you can use array as index to update multi dimensional array\r\n* `$replacement` (mixed) : The new value for the index\r\n* `$write_method` (int) : One of the three constants: \r\n    * `Array_Config_Writer::CREATE_OR_UPDATE` : This makes the library update the value of the specified index or create new index if specified index not found\r\n    * `Array_Config_Writer::SKIP_IF_EXIST` : This will make the library skip updating or creating the index if the index actually exists(can be used if you don't want to override user setting)\r\n    * `Array_Config_Writer::SKIP_CREATE_IF_NOT_EXIST` : This make the library skip creating new index if not already exist. But will update if exist.\r\n   \r\n* `$comments` (array) : Optionally add comment when creating new index. Each value of the array will be placed on a separate line\r\n\r\nBy default the library will create new index if not exists\r\n\r\nTry to update index name **new_index** which does not exist yet\r\n```php\r\n     $config_writer->write('new_index' , 'new index value' );\r\n```\r\n\r\nThe config file will now change to \r\n\r\n```php\r\n    **PHP File** config.php\r\n\r\n    /*\r\n    |--------------------------------------------------------------------------\r\n    | Site need installation\r\n    |--------------------------------------------------------------------------\r\n    |\r\n    | \r\n    |\r\n    */\r\n    $config[ 'site_name'] = \"New Site Name\";\r\n\r\n\r\n    /*\r\n    |--------------------------------------------------------------------------\r\n    |  Enable caching\r\n    |-------------------==-------------------------------------------------------\r\n    |\r\n    |\r\n    */\r\n    $config[ 'enable_caching'] = false;\r\n\r\n    /*\r\n    |--------------------------------------------------------------------------\r\n    |  Custom Array\r\n    |-------------------==-------------------------------------------------------\r\n    |\r\n    |\r\n    */\r\n    $config[ 'message'] = array(\r\n                                'title' => 'My New title' ,\r\n                                 'body' => 'New message body'\r\n                            );\r\n\r\n\r\n    /*\r\n    |--------------------------------------------------------------------------\r\n    |  Another Config Variable for the database \r\n    |-------------------==-------------------------------------------------------\r\n    |\r\n    |\r\n    */\r\n    $db[ 'database'] =  'my_database';\r\n    $db[ 'username'] =  'db_user';\r\n\r\n    /**\r\n    * \r\n    */\r\n    $config['new_index'] = 'new index value';\r\n```\r\n\r\nIf we had provided `$comment` array\r\n\r\n```php\r\n    $comments = [\r\n        'line one',\r\n        'line two',\r\n        'line three'\r\n    ];\r\n    $config_writer->write('new_index' , 'new index value' , Array_Config_Writer::CREATE_OR_UPDATE , $comments );\r\n```\r\n\r\nThe new index would be \r\n\r\n```php\r\n    /**\r\n    * line one\r\n    * line two\r\n    * line three\r\n    */\r\n    $config['new_index'] = 'new index value' ;\r\n```\r\n\r\n##Update Multi Dimensional Array \r\n\r\nTo update array index of this format '$config['db']['username']` , you can update the username  by specifying array as first argument to `write()`\r\n\r\n```php\r\n    $config_writer->write( [ 'db' , 'username'] , 'new db username' );\r\n```\r\n\r\n\r\n## Dealing With Errors\r\n\r\nIt is possible for the update operation not to be success, this could be that \r\n* The file you are try to update does't exist\r\n* You did not set the variable name of the array\r\n* You did not provide valid index to update the index to update\r\n\r\nTo check if any error occur at any point use `hasError()` \r\nTo get the last error that, use `getLastError()` \r\n\r\n\r\n## Class Public Methods\r\nName | Description | Arguments | return\r\n-----|------|------|--------\r\n`__construct` | The class constructor takes 3 arguments |  1.(string): File to update 2.(string) The target variable name 3. (boolean) Whether to save the file after update | Array_Config_write\r\n`setAutoSave` \t\t| Set the auto save option | (boolean) Whether to automatically save the update | Array_Config_writer\r\n`setVariableName` \t| Set the name of the variable for library to update | (string) variable name | Array_Config_writer\r\n`setFilename` \t\t| Set the name of the file for library to save the update to, This is the by default the same file where the variable is searched | (string) The absolute path to file |  Array_Config_writer\r\n`write`                  | Update array index. Takes 4 arguments | 1. (mixed): Index to search for. 2. (mixed): New value for the searched index. 3. (int): Write method. Should be Array_Config_Writer::CREATE_OR_UPDAT or Array_Config_Writer::SKIP_IF_EXIST` or  `Array_Config_Writer::SKIP_CREATE_IF_NOT_EXIST` : This make the library skip creating new index if not already exist. But will update if exist. 4. (array) : Optionally provide comment to be added if the library create new index, Each element is placed on its own line | Array_Config_writer\r\n`save`                  | Save the update to file | none | Array_Config_writer\r\n`hasError`              | Check if any error occur| none | boolean\r\n`getLastError` \t\t| Get the last error | none | string|null",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}